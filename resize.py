# -*- coding: utf-8 -*-
"""Resize.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16uvPeHUPoShwEOb4OyA5neCbUSH8MyvI
"""

from PIL import Image
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Path to the input and output images on Google Drive
input_folder_path = '/content/drive/My Drive/HR'
output_folder_path = '/content/drive/My Drive/LR2'

# Ensure the output folder exists
if not os.path.exists(output_folder_path):
    os.makedirs(output_folder_path)

# Iterate through all files in the input folder
for filename in os.listdir(input_folder_path):
    # Check if the file is an image (you can customize the list of supported extensions)
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        # Construct the full paths
        input_image_path = os.path.join(input_folder_path, filename)
        output_image_path = os.path.join(output_folder_path, f"Noisy_LR_{filename}")

        # Open the image from Google Drive
        original_image = Image.open(input_image_path)

        # Perform bicubic downsampling by a factor of 2 (adjust as needed)
        new_width = original_image.width // 2
        new_height = original_image.height // 2
        downsampled_image = original_image.resize((new_width, new_height), Image.BICUBIC)

        # Save the processed image back to Google Drive
        downsampled_image.save(output_image_path)

print("Processing complete.")

from PIL import Image
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Path to the input and output images on Google Drive
input_image_path = '/content/drive/My Drive/NoisyHR'
output_image_path = '/content/drive/My Drive/Noisy_LR2'

# Open the image from Google Drive
original_image = Image.open(input_image_path)

# Perform bicubic downsampling by a factor of 4
new_width = original_image.width // 2
new_height = original_image.height // 2
downsampled_image = original_image.resize((new_width, new_height), Image.BICUBIC)

# Save the processed image back to Google Drive
downsampled_image.save(output_image_path)

# Unmount Google Drive (optional, depending on your workflow)
# drive.flush_and_unmount()

# Display the processed image if needed
downsampled_image.show()